#version: '2.4'

# environmental variables *for Docker Compose* will be loaded from a `.env` file
# in the same directory as this file

## Arrchive??
# backup databases to Google Files
# https://github.com/EthanC/Arrchive

## Profilarr
# Configuration management
# https://github.com/Dictionarry-Hub/profilarr

services:
  # media
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    hostname: qbt
    # hostname: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=022
      - WEBUI_PORT=${QBT_PORT}
    ports:
      # - 6881:6881
      # - 6881:6881/udp
      - 56881:56881
      - 56881:56881/udp
      - ${QBT_PORT}:${QBT_PORT}
    volumes:
      - ${DOCKER_USERDIR}/volumes/qbittorrent/:/config
      # - ${DOCKER_USERDIR}/volumes/qbittorrent-downloads:/downloads
      - ${DOCKER_EXTRA_DIR}/qbittorrent/downloads:/downloads  # 'E' drive
      # - ${DOCKER_EXTRA_DIR_2}/qbittorrent/more-downloads:/mnt/d  # 'D' drive
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbt.rule=Host("qbt.${LOCAL_DOMAIN_NAME}")
      - traefik.http.services.qbt.loadbalancer.server.port=${QBT_PORT}  # internal port, when multiple ports are exposed
      # - traefik.http.routers.qbt.tls.certresolver=none  # for .lan domain, no ACME challenge

  # rutorrent:
  #   image: ghcr.io/linuxserver/rutorrent
  #   container_name: rutorrent
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   volumes:
  #     - ${DOCKER_USERDIR}/volumes/rutorrent:/config
  #     - ${DOCKER_EXTRA_DIR}/rutorrent/downloads:/downloads
  #     - ${DOCKER_EXTRA_DIR_2}/rutorrent/more-downloads:/mnt/d
  #     - ${DOCKER_USERDIR}/volumes/qbittorrent:/mnt/qbittorrent/config:ro
  #     - ${DOCKER_EXTRA_DIR}/qbittorrent/downloads:/mnt/qbittorrent/downloads:ro
  #   ports:
  #     - 9966:80
  #     - 5000:5000
  #     - 51413:51413
  #     - 6881:6881/udp
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.rutorrent.rule=Host("rutorrent.${LOCAL_DOMAIN_NAME}")
  #     - traefik.http.services.rutorrent.loadbalancer.server.port=80

  # deemix-bockiii:
  #   # https://gitlab.com/Bockiii/deemix-docker
  #   image: registry.gitlab.com/bockiii/deemix-docker
  #   container_name: deemix
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     # - ARL="${DEEMIX_ARL}"
  #     - UMASK_SET=022
  #     - DEEZUI=false
  #   ports:
  #     - 9948:6595
  #   volumes:
  #     - ${DOCKER_USERDIR}/volumes/deemix-bockiii:/config
  #     - ${DOCKER_EXTRA_DIR}/deemix/downloads-2:/downloads
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.deemix.rule=Host("dmix.${LOCAL_DOMAIN_NAME}")


  calibre-web:
    # best calibre web reading

    # this is *just* the web interface from Calibre
    # with the Docker Mod, it pulls and installs a bunch of stuff from
    # `apt`, so it takes a while to start up
    image: lscr.io/linuxserver/calibre-web:nightly
    container_name: calibre-web
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre
      # allow /reconnect URL to work
      # https://github.com/janeczku/calibre-web/issues/2336
      - CALIBRE_RECONNECT=true
    ports:
      - 9936:8083
    volumes:
      - ${DOCKER_USERDIR}/volumes/calibre-web/config:/config
      - ${NAS_DIR}/ebook/calibre:/books:ro
    restart: unless-stopped
    labels:
      - traefik.enable=true
      # - traefik.http.routers.calibreweb2.rule=Host("${LOCAL_DOMAIN_NAME}") && PathPrefix("/books")
      - traefik.http.routers.calibreweb.rule=Host("books.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.calibreweb.entrypoints=web

      - traefik.http.routers.calibreweb-public.rule=Host("books.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.calibreweb-public.entrypoints=web
      - traefik.http.routers.calibreweb-public.middlewares=calibreweb-public-to-https

      - traefik.http.routers.calibreweb-publicsecure.rule=Host("books.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.calibreweb-publicsecure.entrypoints=websecure
      - traefik.http.routers.calibreweb-publicsecure.tls=true
      - traefik.http.routers.calibreweb-publicsecure.tls.certresolver=myresolver
      
      - traefik.http.middlewares.calibreweb-public-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.calibreweb-public-to-https.redirectscheme.permanent=true
    # networks:
    #   external:

  cops:
    # best OPDS feed for calibre
    
    # provides a web interface and OPDS feed for calibre
    image: lscr.io/linuxserver/cops
    container_name: cops
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - 9938:80
    volumes:
      - ${DOCKER_USERDIR}/volumes/cops:/config
      - ${NAS_DIR}/ebook/calibre:/books:ro
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.cops.rule=Host("cops.${LOCAL_DOMAIN_NAME}")
      # - traefik.http.routers.cops.tls.certresolver=none  # for .lan domain, no ACME challenge

  # c.f. https://hub.docker.com/r/linuxserver/calibre

  # ubooquity:
  #   image: lscr.io/linuxserver/ubooquity
  #   container_name: ubooquity
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     # - MAXMEM=maxmem  # runs on Java, max memory in MB
  #   ports:
  #     - 9940:2202
  #     - 9941:2203  # admin port
  #   volumes:
  #     - ${DOCKER_USERDIR}/volumes/ubooquity/config:/config
  #     - ${NAS_DIR}/ebook/calibre:/books:ro
  #     # - path to comics:/comics
  #     # - path to raw files:/files
  #   restart: unless-stopped

  # bicbucstriim:
  #   # this relies on Calibre as well
  #   image: undergrid/bicbucstriim
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   ports:
  #     - 9942:80
  #     - 9943:443
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${DOCKER_USERDIR}/volumes/bicbucstriim/config:/config
  #     - ${NAS_DIR}/ebook/calibre:/books:ro

  # audioserve:
  #   # Audiobook server, Folder (not tag) based
  #   # https://github.com/izderadicka/audioserve
  #   image: izderadicka/audioserve
  #   command:
  #     # - --no-authentication
  #     - /audiobooks  # directory with audiobooks in it; multiple can be listed
  #   environment:
  #     - PUID=${PUID}  # useful?
  #     - PGID=${PGID}  # useful?
  #     - TZ=${TZ}      # useful?
  #     - AUDIOSERVE_SHARED_SECRET=${AUDIOSERVE_SHARED_SECRET}
  #   ports:
  #     - 9944:3000
  #   volumes:
  #     - ${DOCKER_USERDIR}/volumes/audioserve:/home/audioserve/.audioserve
  #     - ${NAS_DIR}/music/Audiobooks:/audiobooks:ro
  #   # restart: unless-stopped
  #   labels:
  #     - traefik.enable=true

  #     - traefik.http.routers.audioserve.rule=Host("ab.${LOCAL_DOMAIN_NAME}")
  #     - traefik.http.routers.audioserve.entrypoints=web
  #     # - traefik.http.routers.audioserve.middlewares=audioserve-to-https

  #     - traefik.http.routers.audioservesecure.rule=Host("ab.${LOCAL_DOMAIN_NAME}")
  #     - traefik.http.routers.audioservesecure.entrypoints=websecure
  #     - traefik.http.routers.audioservesecure.tls=true
  #     # - traefik.http.routers.audioservesecure.tls.certresolver=myresolver
      
  #     # - traefik.http.middlewares.audioserve-to-https.redirectscheme.scheme=https
  #     # - traefik.http.middlewares.audioserve-to-https.redirectscheme.permanent=true

  #     - traefik.http.routers.audioserve-public.rule=Host("ab.${PUBLIC_DOMAIN_NAME}")
  #     - traefik.http.routers.audioserve-public.entrypoints=web
  #     - traefik.http.routers.audioserve-public.middlewares=audioserve-public-to-https

  #     - traefik.http.routers.audioserve-publicsecure.rule=Host("ab.${PUBLIC_DOMAIN_NAME}")
  #     - traefik.http.routers.audioserve-publicsecure.entrypoints=websecure
  #     - traefik.http.routers.audioserve-publicsecure.tls=true
  #     - traefik.http.routers.audioserve-publicsecure.tls.certresolver=myresolver
      
  #     - traefik.http.middlewares.audioserve-public-to-https.redirectscheme.scheme=https
  #     - traefik.http.middlewares.audioserve-public-to-https.redirectscheme.permanent=true

  # # works, but uses 650MB of RAM at rest
  # booksonic-air:
  #   image: lscr.io/linuxserver/booksonic-air
  #   container_name: booksonic-air
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     # - CONTEXT_PATH=url-base
  #   ports:
  #     - 9954:4040
  #   volumes:
  #     - ${DOCKER_USERDIR}/volumes/booksonic-air:/config
  #     - ${NAS_DIR}/music/Audiobooks:/audiobooks:ro
  #     # - /path/to/podcasts:/podcasts
  #     # - /path/to/othermedia:/othermedia
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.booksonicair.rule=Host("booksonic.${LOCAL_DOMAIN_NAME}")
  #     - traefik.http.routers.booksonicair.entrypoints=web

  #     - traefik.http.routers.booksonicair-public.rule=Host("booksonic.${PUBLIC_DOMAIN_NAME}")
  #     - traefik.http.routers.booksonicair-public.entrypoints=web
  #     - traefik.http.routers.booksonicair-public.middlewares=booksonicair-public-to-https

  #     - traefik.http.routers.booksonicair-publicsecure.rule=Host("booksonic.${PUBLIC_DOMAIN_NAME}")
  #     - traefik.http.routers.booksonicair-publicsecure.entrypoints=websecure
  #     - traefik.http.routers.booksonicair-publicsecure.tls=true
  #     - traefik.http.routers.booksonicair-publicsecure.tls.certresolver=myresolver
      
  #     - traefik.http.middlewares.booksonicair-public-to-https.redirectscheme.scheme=https
  #     - traefik.http.middlewares.booksonicair-public-to-https.redirectscheme.permanent=true

  audiobookshelf:
    container_name: audiobookshelf
    hostname: audiobookshelf
    image: ghcr.io/advplyr/audiobookshelf:latest
    environment:
      - AUDIOBOOKSHELF_UID=${PUID}
      - AUDIOBOOKSHELF_GID=${PGID}
    ports:
      - 9974:80
    volumes:
      - ${NAS_DIR}/music/Audiobooks:/audiobooks:ro
      # allow writing to Podcast directory, so it can download them
      - ${NAS_DIR}/home/podcasts:/podcasts
      # - </path/to/podcasts>:/podcasts
      - ${DOCKER_USERDIR}/volumes/audiobookshelf-config:/config
      - ${DOCKER_USERDIR}/volumes/audiobookshelf-metadata:/metadata
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.audiobookshelf.rule=Host("audiobooks.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.audiobookshelf.entrypoints=web

      - traefik.http.routers.audiobookshelf-public.rule=Host("audiobooks.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.audiobookshelf-public.entrypoints=web
      - traefik.http.routers.audiobookshelf-public.middlewares=audiobookshelf-public-to-https

      - traefik.http.routers.audiobookshelf-publicsecure.rule=Host("audiobooks.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.audiobookshelf-publicsecure.entrypoints=websecure
      - traefik.http.routers.audiobookshelf-publicsecure.tls=true
      - traefik.http.routers.audiobookshelf-publicsecure.tls.certresolver=myresolver
      
      - traefik.http.middlewares.audiobookshelf-public-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.audiobookshelf-public-to-https.redirectscheme.permanent=true
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9974/status"]
    #   interval: "30s"
    #   timeout: "10s"
    #   retries: 4

  navidrome:
    # backup is on crony stack
    image: deluan/navidrome:latest
    container_name: navidrome
    user: ${PUID}:${PGID}  # should be owner of volumes
    environment:
      - TZ=${TZ}
      # Optional: put your config options customization here. Examples:
      - ND_SCANSCHEDULE=15m
      - ND_LOGLEVEL=info  
      - ND_SESSIONTIMEOUT=24h
      - ND_BASEURL=/
      # exposing transcoding is a security risk
      # - ND_ENABLETRANSCODINGCONFIG=true
    ports:
      - 9956:4533
    volumes:
      - ${DOCKER_USERDIR}/volumes/navidrome:/data
      - ${NAS_DIR}/music/Music:/music:ro
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.navidrome.rule=Host("music.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.navidrome.entrypoints=web

      - traefik.http.routers.navidrome-public.rule=Host("music.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.navidrome-public.entrypoints=web
      - traefik.http.routers.navidrome-public.middlewares=navidrome-public-to-https

      - traefik.http.routers.navidrome-publicsecure.rule=Host("music.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.navidrome-publicsecure.entrypoints=websecure
      - traefik.http.routers.navidrome-publicsecure.tls=true
      - traefik.http.routers.navidrome-publicsecure.tls.certresolver=myresolver
      
      - traefik.http.middlewares.navidrome-public-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.navidrome-public-to-https.redirectscheme.permanent=true

  jellyfin:
    # media server to compliment Kodi
    # https://hub.docker.com/r/linuxserver/jellyfin
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    # user:
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    ports:
      - 9972:8096
      # - 8920:8920 # optional, HTTPS
      - 7359:7359/udp # optional, LAN auto-discover
      # - 1900:1900/udp # optional, DLNA
    volumes:
      - ${DOCKER_EXTRA_2_DIR}/jellyfin:/config
      - ${NAS_DIR}/video/Movies:/data/movies:ro
      - "${NAS_DIR}/video/Movies, Kids A:/data/movies-kids-a:ro"
      - "${NAS_DIR}/video/Movies, Kids B:/data/movies-kids-b:ro"
      - "${NAS_DIR}/video/Movies [FR]:/data/movies-fr:ro"
      - "${NAS_DIR}/video/TV Shows:/data/tv-shows:ro"
      - "${NAS_DIR}/video/TV Shows, Kids A:/data/tv-shows-kids-a:ro"
      - "${NAS_DIR}/video/TV Shows, Kids B:/data/tv-shows-kids-b:ro"
      - "${NAS_DIR}/video/TV Shows [FR]:/data/tv-shows-fr:ro"
      - "${NAS_DIR}/video/TV Shows, Fake:/data/tv-shows-fake:ro"
      - ${NAS_DIR}/ebook/calibre:/data/ebooks:ro
      - ${NAS_DIR}/music/Music:/data/music:ro
      - ${NAS_DIR}/music/Audiobooks:/data/audiobooks:ro
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host("video.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.jellyfin.entrypoints=web

      - traefik.http.services.jellyfin-service.loadbalancer.server.port=8096  # internal port, when multiple ports are exposed
      - traefik.http.routers.jellyfin.service=jellyfin-service

      - traefik.http.services.jellyfin-public-service.loadbalancer.server.port=8096  # internal port, when multiple ports are exposed
      - traefik.http.routers.jellyfin-public.service=jellyfin-public-service
      - traefik.http.routers.jellyfin-publicsecure.service=jellyfin-public-service

      - traefik.http.routers.jellyfin-public.rule=Host("video.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.jellyfin-public.entrypoints=web
      - traefik.http.routers.jellyfin-public.middlewares=jellyfin-public-to-https

      - traefik.http.routers.jellyfin-publicsecure.rule=Host("video.${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.jellyfin-publicsecure.entrypoints=websecure
      - traefik.http.routers.jellyfin-publicsecure.tls=true
      - traefik.http.routers.jellyfin-publicsecure.tls.certresolver=myresolver
      
      - traefik.http.middlewares.jellyfin-public-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.jellyfin-public-to-https.redirectscheme.permanent=true

  # openbooks:
  #   # container_name: openbooks
  #   image: evanbuss/openbooks:latest
  #   # environment:
  #   #   - BASE_PATH=/openbooks/
  #   command: --persist --name Patriarch1734
  #   ports:
  #     - 9976:80
  #   volumes:
  #     - ${DOCKER_USERDIR}/volumes/openbooks:/books
  #   restart: unless-stopped


  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    hostname: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_USERDIR}/volumes/radarr:/config
      - ${NAS_DIR}/video/Movies:/video/Movies
      - "${NAS_DIR}/video/Movies [FR]:/video/Movies [FR]"
      - "${NAS_DIR}/video/Movies, Kids A:/video/Movies, Kids A"
      - "${NAS_DIR}/video/Movies, Kids B:/video/Movies, Kids B"
      - "${NAS_DIR}/video/_import/movies:/video/_import/movies"  # unsorted, downloaded elsewhere
      - "${NAS_DIR}/video/_duplicates:/video/_duplicates"  # "trash"
      - ${DOCKER_EXTRA_DIR}/qbittorrent/downloads:/downloads  # 'E' drive; match qbittorrent
    ports:
      - 7878:7878
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host("radarr.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.radarr.entrypoints=web

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_USERDIR}/volumes/sonarr:/config
      - ${NAS_DIR}/video/TV Shows:/video/TV Shows
      - "${NAS_DIR}/video/TV Shows [FR]:/video/TV Shows [FR]"
      - "${NAS_DIR}/video/TV Shows, Kids A:/video/TV Shows, Kids A"
      - "${NAS_DIR}/video/TV Shows, Kids B:/video/TV Shows, Kids B"
      - "${NAS_DIR}/video/_import/tv:/video/_import/tv"  # unsorted, downloaded elsewhere
      - "${NAS_DIR}/video/_duplicates:/video/_duplicates"  # "trash"
      - ${DOCKER_EXTRA_DIR}/qbittorrent/downloads:/downloads  # 'E' drive; match qbittorrent
    ports:
      - 8989:8989
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host("sonarr.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.sonarr.entrypoints=web


  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    hostname: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_USERDIR}/volumes/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host("prowlarr.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.prowlarr.entrypoints=web


  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    hostname: flaresolverr
    environment:
      - LOG_LEVEL=${FLARESOLVERR_LOG_LEVEL:-info}
      - LOG_HTML=${FLARESOLVERR_LOG_HTML:-false}
      - CAPTCHA_SOLVER=${FLARESOLVERR_CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    ports:
      - 8191:8191
    restart: unless-stopped


  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    hostname: unpackerr
    volumes:
      # You need at least this one volume mapped so Unpackerr can find your files to extract.
      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
      - ${DOCKER_EXTRA_DIR}/qbittorrent/downloads:/downloads  # 'E' drive
    # Get the user:group correct so unpackerr can read and write to your files.
    user: ${PUID}:${PGID}
    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
    # Remove apps and feature configs you do not use or need. 
    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
    ### See this URL for variable descriptions and options:
    ### https://unpackerr.zip/docs/install/configuration
    environment:
      - TZ=${TZ}
      ## General config
      # - UN_DEBUG=false
      # - UN_LOG_FILE=
      # - UN_LOG_FILES=10
      # - UN_LOG_FILE_MB=10
      # - UN_INTERVAL=2m
      # - UN_START_DELAY=1m
      # - UN_RETRY_DELAY=5m
      # - UN_MAX_RETRIES=3
      # - UN_PARALLEL=1
      # - UN_FILE_MODE=0644
      # - UN_DIR_MODE=0755
      - UN_ACTIVITY=true
      ## Sonarr Config
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_SONARR_0_PATHS_0=/downloads
      - UN_SONARR_0_PROTOCOLS=torrent
      - UN_SONARR_0_TIMEOUT=10s
      - UN_SONARR_0_DELETE_ORIG=false
      - UN_SONARR_0_DELETE_DELAY=5m
      ## Radarr Config
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
      - UN_RADARR_0_PATHS_0=/downloads
      - UN_RADARR_0_PROTOCOLS=torrent
      - UN_RADARR_0_TIMEOUT=10s
      - UN_RADARR_0_DELETE_ORIG=false
      - UN_RADARR_0_DELETE_DELAY=5m
      # ## Lidarr Config
      # - UN_LIDARR_0_URL=http://lidarr:8686
      # - UN_LIDARR_0_API_KEY=
      # - UN_LIDARR_0_PATHS_0=/downloads
      # - UN_LIDARR_0_PROTOCOLS=torrent
      # - UN_LIDARR_0_TIMEOUT=10s
      # - UN_LIDARR_0_DELETE_ORIG=false
      # - UN_LIDARR_0_DELETE_DELAY=5m
      # ## Readarr Config
      # - UN_READARR_0_URL=http://readarr:8787
      # - UN_READARR_0_API_KEY=
      # - UN_READARR_0_PATHS_0=/downloads
      # - UN_READARR_0_PROTOCOLS=torrent
      # - UN_READARR_0_TIMEOUT=10s
      # - UN_READARR_0_DELETE_ORIG=false
      # - UN_READARR_0_DELETE_DELAY=5m
      # ## Folder Config
      # - UN_FOLDER_0_PATH=
      # - UN_FOLDER_0_EXTRACT_PATH=
      # - UN_FOLDER_0_DELETE_AFTER=10m
      # - UN_FOLDER_0_DELETE_ORIGINAL=false
      # - UN_FOLDER_0_DELETE_FILES=false
      # - UN_FOLDER_0_MOVE_BACK=false
      # ## Webhook Config
      # - UN_WEBHOOK_0_URL=
      # - UN_WEBHOOK_0_NAME=
      # - UN_WEBHOOK_0_NICKNAME=Unpackerr
      # - UN_WEBHOOK_0_CHANNEL=
      # - UN_WEBHOOK_0_TIMEOUT=10s
      # - UN_WEBHOOK_0_SILENT=false
      # - UN_WEBHOOK_0_IGNORE_SSL=false
      # - UN_WEBHOOK_0_EXCLUDE_0=
      # - UN_WEBHOOK_0_EVENTS_0=0
      # - UN_WEBHOOK_0_TEMPLATE_PATH=
      # - UN_WEBHOOK_0_CONTENT_TYPE=application/json
      # ## Command Hook Config
      ## Unpackerr can execute commands (or scripts) before and after an archive extraction.
      ## The only thing required is a command. Name is optional, and used in logs only. 
      # - UN_CMDHOOK_0_COMMAND=
      # - UN_CMDHOOK_0_NAME=
      # - UN_CMDHOOK_0_TIMEOUT=10s
      # - UN_CMDHOOK_0_SILENT=false
      # - UN_CMDHOOK_0_SHELL=false
      # - UN_CMDHOOK_0_EXCLUDE_0=
      # - UN_CMDHOOK_0_EVENTS_0=0
      ## Web Server Config
      ## The web server currently only provides prometheus metrics, which you can display in Grafana. It provides no UI.
      # - UN_WEBSERVER_METRICS=false
      # - UN_WEBSERVER_LISTEN_ADDR=0.0.0.0:5656
      # - UN_WEBSERVER_LOG_FILE=
      # - UN_WEBSERVER_LOG_FILES=10
      # - UN_WEBSERVER_LOG_FILE_MB=10
      # - UN_WEBSERVER_SSL_CERT_FILE=
      # - UN_WEBSERVER_SSL_KEY_FILE=
      # - UN_WEBSERVER_URLBASE=/
      # - UN_WEBSERVER_UPSTREAMS=
    ports:
      - 5656:5656
    restart: unless-stopped
    labels:
      - traefik.enable=false
      # - traefik.enable=true
      # - traefik.http.routers.unpackerr.rule=Host("unpackerr.${LOCAL_DOMAIN_NAME}")
      # - traefik.http.routers.unpackerr.entrypoints=web

  # provides local trailers for movies (and TV shows?)
  # default login: admin/trailarr
  trailarr:
    container_name: trailarr
    # image: nandyalu/trailarr:latest
    image: nandyalu/trailarr:nightly
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_USERDIR}/volumes/trailarr:/config
      - ${NAS_DIR}/video/TV Shows:/video/TV Shows
      - "${NAS_DIR}/video/TV Shows [FR]:/video/TV Shows [FR]"
      - "${NAS_DIR}/video/TV Shows, Kids A:/video/TV Shows, Kids A"
      - "${NAS_DIR}/video/TV Shows, Kids B:/video/TV Shows, Kids B"
      - ${NAS_DIR}/video/Movies:/video/Movies
      - "${NAS_DIR}/video/Movies [FR]:/video/Movies [FR]"
      - "${NAS_DIR}/video/Movies, Kids A:/video/Movies, Kids A"
      - "${NAS_DIR}/video/Movies, Kids B:/video/Movies, Kids B"
    ports:
      - 7889:7889
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.trailarr.rule=Host("trailarr.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.trailarr.entrypoints=web

  jellyseerr:
    # fork of Overseerr to allow for requests
    container_name: jellyseerr
    image: fallenbagel/jellyseerr:latest
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
    volumes:
      - ${DOCKER_USERDIR}/volumes/jellyseerr:/app/config
    ports:
      - 5055:5055
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host("jellyseerr.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.jellyseerr.entrypoints=web


  cross-seed:
    # automatically cross-seed torrents between (private) trackers
    image: ghcr.io/cross-seed/cross-seed:6
    container_name: cross-seed
    hostname: cross-seed
    user: ${PUID}:${PGID} # this must match your torrent client (cross-seed does not support using PGID and PUID)
    ports:
      - 2468:2468
    volumes:
      - ${DOCKER_USERDIR}/volumes/cross-seed:/config
      - ${DOCKER_EXTRA_DIR}/qbittorrent/downloads:/downloads  # 'E' drive
      #- # You will need at least one extra volume for your media drive if using https://www.cross-seed.org/docs/tutorials/linking
    command: daemon
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.cross-seed.rule=Host("cross-seed.${LOCAL_DOMAIN_NAME}")

  # PhotoPrism -- photo sorter with face and subject recongition
  # suggests minimum 2 cores and 4GB of memory
  # https://github.com/photoprism/photoprism



  # immich -- photo management, gallary, and mobile backup target
  # (see possible additional items at the bottom)
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    hostname: immich
    environment:
      # https://immich.app/docs/install/environment-variables/
      # - UPLOAD_LOCATION=${IMMICH_UPLOAD_LOCATION}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DB_HOSTNAME=immich-db
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - REDIS_HOSTNAME=immich-redis
    volumes:
      # # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      # - ${UPLOAD_LOCATION}:/usr/src/app/upload
      # - ${DOCKER_EXTRA_DIR}/immich-uploads:/usr/src/app/upload
      # - ${NAS_DIR}/photo/_immich-photos:/usr/src/app/upload:rw
      - ${NAS_DIR}/home/immich-photos:/usr/src/app/upload:rw
      # to ensure access to latest photos, go to Synology Photo Station --> Settings --> User Accounts --> docker
      - ${NAS_DIR}/photo:/mnt/photo:ro
      - "${NAS_DIR}/video/TV Shows, Take/Home Videos (2015):/mnt/video/family-videos:ro"
      - /etc/localtime:/etc/localtime:ro
    # env_file:
    #   - .env
    ports:
      - '9988:2283'
    depends_on:
      - immich-redis
      - immich-db
    restart: unless-stopped
    labels:
      # - traefik.enable=false
      - traefik.enable=true
      - traefik.http.routers.immich.rule=Host("immich.${LOCAL_DOMAIN_NAME}")
      - traefik.http.routers.immich.entrypoints=web
      # - traefik.http.routers.immich.middlewares=immich-to-https

      # - traefik.http.routers.immich-secure.rule=Host("immich.${LOCAL_DOMAIN_NAME}")
      # - traefik.http.routers.immich-secure.entrypoints=websecure
      # - traefik.http.routers.immich-secure.tls=true
      # # - traefik.http.routers.immich-secure.tls.certresolver=myresolver
      # # - traefik.http.routers.immich-secure.tls.certresolver=none  # for .lan domain, no ACME challenge
      
      # - traefik.http.middlewares.immich-to-https.redirectscheme.scheme=https
      # - traefik.http.middlewares.immich-to-https.redirectscheme.permanent=true
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    environment:
      # - UPLOAD_LOCATION=${IMMICH_UPLOAD_LOCATION}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - MACHINE_LEARNING_MODEL_TTL=300  # default is 300 seconds
    volumes:
      - ${DOCKER_USERDIR}/volumes/immich-model-cache:/cache
    # env_file:
    #   - .env
    restart: unless-stopped
    healthcheck:
      disable: false

  immich-redis:
    container_name: immich-redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:ff21bc0f8194dc9c105b769aeabf9585fea6a8ed649c0781caeac5cb3c247884
    hostname: immich-redis
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped

  immich-db:
    container_name: immich-postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0
    hostname: immich-db
    environment:
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_USER=${IMMICH_DB_USERNAME}
      - POSTGRES_DB=${IMMICH_DB_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS='--data-checksums'
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      - DB_STORAGE_TYPE=HDD
    volumes:
      # # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      # - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
      - ${DOCKER_USERDIR}/volumes/immich-db:/var/lib/postgresql/data
    restart: unless-stopped

  immich-power-tools:
    container_name: immich-power-tools
    image: ghcr.io/varun-raj/immich-power-tools:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DB_HOST=immich-db
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - IMMICH_API_KEY=${IMMICH_API_KEY}
      - IMMICH_URL=${IMMICH_URL_INTERNAL}
      - EXTERNAL_IMMICH_URL=${IMMICH_URL_INTERNAL}
    ports:
      - 9992:3000
    restart: unless-stopped

  # immich-folder-album-creator
  # Creates Albums based on your folder structure
  # https://github.com/Salvoxia/immich-folder-album-creator

  # immich-duplicate-finder
  # Find Duplicate photos within Immich
  # https://github.com/vale46n1/immich_duplicate_finder

  # selfie timelapse
  # https://github.com/ArnaudCrl/immich-automated-selfie-timelapse

networks:
  default:
    external: true
    name: meta_external
