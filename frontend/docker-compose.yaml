# version: '2.4'

# environmental variables *for Docker Compose* will be loaded from a `.env` file
# in the same directory as this file

services:
  # meta
  traefik:
    image: traefik:2.10
    command:
      # - --configFile=/config/traefik.old.toml
      # - --accessLog.filePath=/var/log/access.log
      # - --accessLog.filters.statusCodes=400-499
      - --global.sendanonymoususage=false

      - --api=true
      - --api.insecure=true  # 2.0
      - --api.dashboard=true

      - --providers.docker=true  # 2.0
      - --providers.docker.exposedByDefault=false
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${LOCAL_DOMAIN_NAME}`)
      - --providers.docker.network=meta_external
      # - --providers.file.filename=/config/rules.toml

      - --entrypoints.web.address=:80
      - --entrypoints.web.forwardedheaders.trustedips=192.168.1.1
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.forwardedheaders.trustedips=192.168.1.1
      - --entrypoints.websecure.http.tls.certresolver=myresolver
      # - --entrypoints.minecraft.address=:19132

      # HTTPS Certificate
      - --certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.myresolver.acme.httpChallenge=true
      - --certificatesresolvers.myresolver.acme.httpChallenge.entryPoint=web
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory  # Staging server

      # access logs visible through stdout
      - --accesslog=true
      - --accesslog.filters.statuscodes=300-599  # so not 200 (success)
      - --accesslog.filters.minduration=10ms
      - --accesslog.filters.retryattempts
      - --accesslog.filepath=/var/log/access.log

      # - --log.level=DEBUG
      # TODO: push stats to InfluxDB
    hostname: traefik
    container_name: traefik
    ports:
      - 80:80
      - 443:443
      - 9916:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKER_USERDIR}/volumes/traefik/config:/config:ro
      - ${DOCKER_USERDIR}/volumes/traefik/acme:/etc/traefik/acme
      - ${DOCKER_USERDIR}/volumes/traefik/logs:/var/log
      - ${DOCKER_USERDIR}/volumes/shared:/shared
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=meta_external
      # - traefik.docker.domain=${LOCAL_DOMAIN_NAME}
      # - traefik.docker.exposedByDefault=false
      # - traefik.docker.watch=true
      - traefik.http.routers.traefik-container.rule=Host("traefik.${LOCAL_DOMAIN_NAME}")  # 2.0
      - traefik.http.services.traefik-container.loadbalancer.server.port=8080  # internal port, when multiple ports are exposed
      # - traefik.providers.docker.exposedByDefault=false
      # - traefik.http.routers.traefik-container.rule=Host("${LOCAL_DOMAIN_NAME}") && PathPrefix("/traefik")  # 2.0
      # - traefik.http.middlewares.traefik-container.stripprefix.prefixes=/traefik
      # - traefik.http.routers.traefik-container.tls.certresolver=none  # for .lan domain, no ACME challenge
      # - traefik.http.routers.traefik-container.tls=false  # for .lan domain, no ACME challenge

      ## HTTP --> HTTPS redirect
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

      ## Export states to Grafana
      # https://theorangeone.net/posts/traefik-influx-metrics/
              
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    network_mode: "host"
    restart: always
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ${DOCKER_USERDIR}/volumes/traefik/logs:/var/log:ro
      - ${DOCKER_USERDIR}/volumes/fail2ban/data:/data
    labels:
      - traefik.enable=false

  landingpage:
    # serve a static file as the "landing page"
    image: halverneus/static-file-server
    restart: unless-stopped
    environment:
      - FOLDER=/config
      - DEBUG=true
    volumes:
      - ${DOCKER_USERDIR}/volumes/landing:/config
      # - /etc/localtime:/etc/localtime:ro  # doesn't make a difference
      # - "${NAS_DIR}/video/Movies/Ghostbusters - Afterlife (2021):/config/alex:ro"
    ports:
      - 9918:8080
    labels:
      - traefik.enable=true
      # - traefik.http.routers.landing-page.rule=Host("${LOCAL_DOMAIN_NAME}") || Host("${PUBLIC_DOMAIN_NAME}")
      
      # declare both the HTTP and HTTPS versions, and then a middleware
      # that redirects HTTP --> HTTPS
      - traefik.http.routers.landing-page.rule=Host("${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.landing-page.entrypoints=web
      - traefik.http.routers.landing-page.middlewares=landing-page-to-https
      
      - traefik.http.routers.landing-page-secure.rule=Host("${PUBLIC_DOMAIN_NAME}")
      - traefik.http.routers.landing-page-secure.entrypoints=websecure
      - traefik.http.routers.landing-page-secure.tls=true
      - traefik.http.routers.landing-page-secure.tls.certresolver=myresolver
      
      - traefik.http.middlewares.landing-page-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.landing-page-to-https.redirectscheme.permanent=true

      - traefik.http.routers.landing-page-internal.rule=Host("${LOCAL_DOMAIN_NAME}")
      # - traefik.http.routers.landing-page-internal.tls.certresolver=none  # for .lan domain, no ACME challenge
      # - traefik.http.routers.landing-page-internal.tls=false  # for .lan domain, no ACME challenge

  jrnl:
    # serve my notes as a pre-rendered static site
    # don't make publically available without access control
    image: halverneus/static-file-server
    restart: unless-stopped
    environment:
      - FOLDER=/config
      - DEBUG=true
    volumes:
      - ${DOCKER_USERDIR}/volumes/jrnl:/config
      # - /etc/localtime:/etc/localtime:ro  # doesn't make a difference
      # - "${NAS_DIR}/video/Movies/Ghostbusters - Afterlife (2021):/config/alex:ro"
    ports:
      - 9990:8080
    labels:
      - traefik.enable=true
 
      # # declare both the HTTP and HTTPS versions, and then a middleware
      # # that redirects HTTP --> HTTPS
      # - traefik.http.routers.jrnl.rule=Host("jrnl.${PUBLIC_DOMAIN_NAME}")
      # - traefik.http.routers.jrnl.entrypoints=web
      # - traefik.http.routers.jrnl.middlewares=landing-page-to-https
      
      # - traefik.http.routers.jrnl-secure.rule=Host("jrnl.${PUBLIC_DOMAIN_NAME}")
      # - traefik.http.routers.jrnl-secure.entrypoints=websecure
      # - traefik.http.routers.jrnl-secure.tls=true
      # - traefik.http.routers.jrnl-secure.tls.certresolver=myresolver
      
      # - traefik.http.middlewares.jrnl-to-https.redirectscheme.scheme=https
      # - traefik.http.middlewares.jrnl-to-https.redirectscheme.permanent=true

      - traefik.http.routers.jrnl-internal.rule=Host("jrnl.${LOCAL_DOMAIN_NAME}")
      # - traefik.http.routers.jrnl-internal.tls.certresolver=none  # for .lan domain, no ACME challenge
      # - traefik.http.routers.jrnl-internal.tls=false  # for .lan domain, no ACME challenge



networks:
  default:
      name: meta_external
    external: true
